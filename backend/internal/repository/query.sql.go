// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHighlight = `-- name: CreateHighlight :one
INSERT INTO highlights (id, session_id, text, position) 
VALUES ($1, $2, $3, $4) 
RETURNING id, session_id, text, position, created_at
`

type CreateHighlightParams struct {
	ID        pgtype.UUID `json:"id"`
	SessionID pgtype.UUID `json:"session_id"`
	Text      string      `json:"text"`
	Position  int32       `json:"position"`
}

func (q *Queries) CreateHighlight(ctx context.Context, arg CreateHighlightParams) (Highlight, error) {
	row := q.db.QueryRow(ctx, createHighlight,
		arg.ID,
		arg.SessionID,
		arg.Text,
		arg.Position,
	)
	var i Highlight
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Text,
		&i.Position,
		&i.CreatedAt,
	)
	return i, err
}

const createInteraction = `-- name: CreateInteraction :one
INSERT INTO interactions (id, highlight_id, question, answer) 
VALUES ($1, $2, $3, $4) 
RETURNING id, highlight_id, question, answer, created_at, updated_at
`

type CreateInteractionParams struct {
	ID          pgtype.UUID `json:"id"`
	HighlightID pgtype.UUID `json:"highlight_id"`
	Question    string      `json:"question"`
	Answer      pgtype.Text `json:"answer"`
}

func (q *Queries) CreateInteraction(ctx context.Context, arg CreateInteractionParams) (Interaction, error) {
	row := q.db.QueryRow(ctx, createInteraction,
		arg.ID,
		arg.HighlightID,
		arg.Question,
		arg.Answer,
	)
	var i Interaction
	err := row.Scan(
		&i.ID,
		&i.HighlightID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, name, status) 
VALUES ($1, $2, $3) 
RETURNING id, name, status, created_at, updated_at
`

type CreateSessionParams struct {
	ID     pgtype.UUID `json:"id"`
	Name   string      `json:"name"`
	Status string      `json:"status"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.ID, arg.Name, arg.Status)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHighlightsBySession = `-- name: DeleteHighlightsBySession :exec
DELETE FROM highlights 
WHERE session_id = $1
`

func (q *Queries) DeleteHighlightsBySession(ctx context.Context, sessionID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteHighlightsBySession, sessionID)
	return err
}

const deleteInteractionsByHighlight = `-- name: DeleteInteractionsByHighlight :exec
DELETE FROM interactions 
WHERE highlight_id = $1
`

func (q *Queries) DeleteInteractionsByHighlight(ctx context.Context, highlightID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteInteractionsByHighlight, highlightID)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions 
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getHighlight = `-- name: GetHighlight :one
SELECT id, session_id, text, position, created_at 
FROM highlights 
WHERE id = $1
`

func (q *Queries) GetHighlight(ctx context.Context, id pgtype.UUID) (Highlight, error) {
	row := q.db.QueryRow(ctx, getHighlight, id)
	var i Highlight
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Text,
		&i.Position,
		&i.CreatedAt,
	)
	return i, err
}

const getHighlightsBySession = `-- name: GetHighlightsBySession :many
SELECT id, session_id, text, position, created_at 
FROM highlights 
WHERE session_id = $1 
ORDER BY position
`

func (q *Queries) GetHighlightsBySession(ctx context.Context, sessionID pgtype.UUID) ([]Highlight, error) {
	rows, err := q.db.Query(ctx, getHighlightsBySession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Highlight{}
	for rows.Next() {
		var i Highlight
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Text,
			&i.Position,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInteraction = `-- name: GetInteraction :one
SELECT id, highlight_id, question, answer, created_at, updated_at 
FROM interactions 
WHERE id = $1
`

func (q *Queries) GetInteraction(ctx context.Context, id pgtype.UUID) (Interaction, error) {
	row := q.db.QueryRow(ctx, getInteraction, id)
	var i Interaction
	err := row.Scan(
		&i.ID,
		&i.HighlightID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInteractionByHighlight = `-- name: GetInteractionByHighlight :one
SELECT id, highlight_id, question, answer, created_at, updated_at 
FROM interactions 
WHERE highlight_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetInteractionByHighlight(ctx context.Context, highlightID pgtype.UUID) (Interaction, error) {
	row := q.db.QueryRow(ctx, getInteractionByHighlight, highlightID)
	var i Interaction
	err := row.Scan(
		&i.ID,
		&i.HighlightID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInteractionsByHighlight = `-- name: GetInteractionsByHighlight :many
SELECT id, highlight_id, question, answer, created_at, updated_at 
FROM interactions 
WHERE highlight_id = $1
`

func (q *Queries) GetInteractionsByHighlight(ctx context.Context, highlightID pgtype.UUID) ([]Interaction, error) {
	rows, err := q.db.Query(ctx, getInteractionsByHighlight, highlightID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Interaction{}
	for rows.Next() {
		var i Interaction
		if err := rows.Scan(
			&i.ID,
			&i.HighlightID,
			&i.Question,
			&i.Answer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one
SELECT id, name, status, created_at, updated_at 
FROM sessions 
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, name, status, created_at, updated_at 
FROM sessions 
ORDER BY created_at DESC
`

func (q *Queries) ListSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInteractionAnswer = `-- name: UpdateInteractionAnswer :one
UPDATE interactions 
SET answer = $2, updated_at = CURRENT_TIMESTAMP 
WHERE id = $1
RETURNING id, highlight_id, question, answer, created_at, updated_at
`

type UpdateInteractionAnswerParams struct {
	ID     pgtype.UUID `json:"id"`
	Answer pgtype.Text `json:"answer"`
}

func (q *Queries) UpdateInteractionAnswer(ctx context.Context, arg UpdateInteractionAnswerParams) (Interaction, error) {
	row := q.db.QueryRow(ctx, updateInteractionAnswer, arg.ID, arg.Answer)
	var i Interaction
	err := row.Scan(
		&i.ID,
		&i.HighlightID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInteractionQuestion = `-- name: UpdateInteractionQuestion :one
UPDATE interactions 
SET question = $2, updated_at = CURRENT_TIMESTAMP 
WHERE id = $1
RETURNING id, highlight_id, question, answer, created_at, updated_at
`

type UpdateInteractionQuestionParams struct {
	ID       pgtype.UUID `json:"id"`
	Question string      `json:"question"`
}

func (q *Queries) UpdateInteractionQuestion(ctx context.Context, arg UpdateInteractionQuestionParams) (Interaction, error) {
	row := q.db.QueryRow(ctx, updateInteractionQuestion, arg.ID, arg.Question)
	var i Interaction
	err := row.Scan(
		&i.ID,
		&i.HighlightID,
		&i.Question,
		&i.Answer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSessionName = `-- name: UpdateSessionName :one
UPDATE sessions 
SET name = $2, updated_at = CURRENT_TIMESTAMP 
WHERE id = $1
RETURNING id, name, status, created_at, updated_at
`

type UpdateSessionNameParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateSessionName(ctx context.Context, arg UpdateSessionNameParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSessionName, arg.ID, arg.Name)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSessionStatus = `-- name: UpdateSessionStatus :exec
UPDATE sessions 
SET status = $2, updated_at = CURRENT_TIMESTAMP 
WHERE id = $1
`

type UpdateSessionStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status string      `json:"status"`
}

func (q *Queries) UpdateSessionStatus(ctx context.Context, arg UpdateSessionStatusParams) error {
	_, err := q.db.Exec(ctx, updateSessionStatus, arg.ID, arg.Status)
	return err
}
